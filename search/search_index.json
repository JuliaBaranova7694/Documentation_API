{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"about/","title":"About our API","text":""},{"location":"reference_api/","title":"Reference API","text":"<p>info:   title: \u041f\u0440\u0438\u043c\u0435\u0440 API \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438   description: API \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439.   version: 1.0.0</p> <p>security:   - api_key: []</p> <p>servers:   - url: https://api.documentat.io/api/prod     description: \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0441\u0435\u0440\u0432\u0435\u0440   - url: https://api.documentat.io/api/dev     description: \u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0441\u0435\u0440\u0432\u0435\u0440</p> <p>paths:   /users:     get:       summary: \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439       operationId: usersGET       tags:         - users       parameters:         - name: limit           in: query           required: false           description: \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435           schema:             type: integer             default: 10       responses:         '200':           $ref: '#/components/responses/UserListSuccess'         '401':           $ref: '#/components/responses/Unauthorized'         '500':           $ref: '#/components/responses/ServerError'</p> <pre><code>post:\n  summary: \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n  operationId: usersPOST\n  tags:\n    - users\n  requestBody:\n    content:\n      application/json:\n        schema:\n          $ref: '#/components/schemas/CreateUser'\n  responses:\n    '201':\n      $ref: '#/components/responses/UserCreationSuccess'\n    '400':\n      $ref: '#/components/responses/BadRequest'\n    '401':\n      $ref: '#/components/responses/Unauthorized'\n    '409':\n      $ref: '#/components/responses/Conflict'\n    '500':\n      $ref: '#/components/responses/ServerError'\n</code></pre> <p>/users/{id}:     get:       summary: \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u043f\u043e ID       operationId: usersIdGET       tags:         - users       parameters:         - name: id           in: path           required: true           description: \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f           schema:             type: integer       responses:         '200':           $ref: '#/components/responses/Success'         '401':           $ref: '#/components/responses/Unauthorized'         '404':           $ref: '#/components/responses/UserNotFound'         '500':           $ref: '#/components/responses/ServerError'</p> <pre><code>put:\n  summary: \"\"\n  operationId: usersIdPUT\n  tags:\n    - users\n  parameters:\n    - name: id\n      in: path\n      required: true\n      schema:\n        type: integer\n  requestBody:\n    required: true\n    content:\n      application/json:\n        schema:\n          $ref: '#/components/schemas/CreateUser'\n  responses:\n    '200':\n      $ref: '#/components/responses/UserUpdateSuccess'\n    '400':\n      $ref: '#/components/responses/BadRequest'\n    '401':\n      $ref: '#/components/responses/Unauthorized'\n    '404':\n      $ref: '#/components/responses/UserNotFound'\n    '405':\n      $ref: '#/components/responses/MethodNotAllowed'\n    '422':\n      $ref: '#/components/responses/UnprocessableEntity'\n    '500':\n      $ref: '#/components/responses/ServerError'\n\npatch:\n  summary: \"\"\n  operationId: usersIdPATCH\n  tags:\n    - users\n  parameters:\n    - name: id\n      in: path\n      required: true\n      schema:\n        type: integer\n  requestBody:\n    required: true\n    content:\n      application/json:\n        schema:\n          $ref: '#/components/schemas/PartialUserUpdate'\n  responses:\n    '200':\n      $ref: '#/components/responses/UserUpdateSuccess'\n    '400':\n      $ref: '#/components/responses/BadRequest'\n    '401':\n      $ref: '#/components/responses/Unauthorized'\n    '404':\n      $ref: '#/components/responses/UserNotFound'\n    '405':\n      $ref: '#/components/responses/MethodNotAllowed'\n    '422':\n      $ref: '#/components/responses/UnprocessableEntity'\n    '500':\n      $ref: '#/components/responses/ServerError'\n\ndelete:\n  summary: \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n  operationId: usersIdDELETE\n  tags:\n    - users\n  parameters:\n    - name: id\n      in: path\n      required: true\n      description: \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n      schema:\n        type: integer\n  responses:\n    '204':\n      $ref: '#/components/responses/UserDeleteSuccess'\n    '401':\n      $ref: '#/components/responses/Unauthorized'\n    '404':\n      $ref: '#/components/responses/UserNotFound'\n    '500':\n      $ref: '#/components/responses/ServerError'\n</code></pre> <p>components:   schemas:     User:       type: object       required:         - id         - username         - email         - firstName         - lastName         - address         - age         - isEmployee         - accountStatus       properties:         id:           type: integer           format: int64           description: \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f         username:           type: string         email:           type: string         firstName:           type: string         lastName:           type: string         address:           type: object           properties:             country:               type: string             city:               type: string             street:               type: string             house:               type: string           required:             - country             - city             - street             - house         age:           type: integer         isEmployee:           type: boolean           default: true         accountStatus:           type: string           default: active           enum:             - active             - inactive             - suspended</p> <pre><code>CreateUser:\n  type: object\n  required:\n    - username\n    - email\n    - firstName\n    - lastName\n    - address\n    - age\n    - isEmployee\n    - accountStatus\n  properties:\n    username:\n      type: string\n    email:\n      type: string\n    firstName:\n      type: string\n    lastName:\n      type: string\n    address:\n      type: object\n      properties:\n        country:\n          type: string\n        city:\n          type: string\n        street:\n          type: string\n        house:\n          type: string\n      required:\n        - country\n        - city\n        - street\n        - house\n    age:\n      type: integer\n    isEmployee:\n      type: boolean\n      default: true\n    accountStatus:\n      type: string\n      default: active\n      enum:\n        - active\n        - inactive\n        - suspended\n\nPartialUserUpdate:\n  type: object\n  properties:\n    username:\n      type: string\n    email:\n      type: string\n    firstName:\n      type: string\n    lastName:\n      type: string\n    address:\n      type: object\n      properties:\n        country:\n          type: string\n        city:\n          type: string\n        street:\n          type: string\n        house:\n          type: string\n    age:\n      type: integer\n    isEmployee:\n      type: boolean\n      default: true\n    accountStatus:\n      type: string\n      default: active\n      enum:\n        - active\n        - inactive\n        - suspended\n\nerror:\n  required:\n    - code\n    - message\n  type: object\n  properties:\n    code:\n      type: integer\n      format: int32\n    message:\n      type: string\n</code></pre> <p>responses:     UserListSuccess:       description: \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d       content:         application/json:           schema:             type: array             items:               $ref: '#/components/schemas/User'</p> <pre><code>Success:\n  description: \u0414\u0430\u043d\u043d\u044b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u044b\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/User'\n\nUserCreationSuccess:\n  description: \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u043d\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/User'\n\nUserUpdateSuccess:\n  description: \u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u044b\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/User'\n\nUserDeleteSuccess:\n  description: \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0443\u0434\u0430\u043b\u0435\u043d\n\nUserNotFound:\n  description: \"\"\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/error'\n\nUnauthorized:\n  description: \"\"\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/error'\n\nConflict:\n  description: \"\"\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/error'\n\nMethodNotAllowed:\n  description: \"\"\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/error'\n\nBadRequest:\n  description: \"\"\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/error'\n\nServerError:\n  description: \"\"\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/error'\n\nUnprocessableEntity:\n  description: \"\"\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/error'\n</code></pre> <p>securitySchemes:     api_key:       type: apiKey       name: Token       in: header</p> <p>tags:   - name: users     description: \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438</p>"}]}